# """
# Entry point for the FastAPI Application
# """

# from fastapi import FastAPI, WebSocket, WebSocketDisconnect, Depends, HTTPException, status
# from fastapi.middleware.cors import CORSMiddleware
# from routers import auth_router, tournament_router, application_router, websocket_router
# from api.utils.jwt_utils import verify_jwt_token  # Ensure this path is correct
# import os
# import jwt  # Ensure jwt is used for exception handling

# app = FastAPI()

# app.add_middleware(
#     CORSMiddleware,
#     allow_origins=[os.environ.get("CORS_HOST", "http://localhost:5173")],
#     allow_credentials=True,
#     allow_methods=["*"],
#     allow_headers=["*"],
# )

# # Including routers for authentication, tournament management, application-specific logic, and WebSocket communication
# app.include_router(auth_router.router)
# app.include_router(tournament_router.router)
# app.include_router(application_router.router)
# app.include_router(websocket_router.router)  # This includes your WebSocket router

# class ConnectionManager:
#     def __init__(self):
#         self.active_connections = []

#     async def connect(self, websocket: WebSocket):
#         await websocket.accept()
#         self.active_connections.append(websocket)

#     def disconnect(self, websocket: WebSocket):
#         self.active_connections.remove(websocket)

#     async def send_personal_message(self, message: str, websocket: WebSocket):
#         await websocket.send_text(message)

# manager = ConnectionManager()

# async def get_current_user(token: str = Depends(verify_jwt_token)):
#     try:
#         # Assuming verify_jwt_token returns user information or raises an HTTPException if the token is invalid
#         return verify_jwt_token(token)
#     except jwt.JWTError:
#         raise HTTPException(
#             status_code=status.HTTP_401_UNAUTHORIZED,
#             detail="Invalid authentication credentials",
#             headers={"WWW-Authenticate": "Bearer"},
#         )

# @app.websocket("/ws/{user_id}")
# async def websocket_endpoint(websocket: WebSocket, user_id: int, user: dict = Depends(get_current_user)):
#     await manager.connect(websocket)
#     try:
#         while True:
#             data = await websocket.receive_text()
#             # Now, `user` is the authenticated user's data from JWT
#             await manager.send_personal_message(f"{user['username']} sent: {data}", websocket)
#     except WebSocketDisconnect:
#         manager.disconnect(websocket)
#         print(f"User {user_id} disconnected")

# @app.get("/api/launch-details")
# def launch_details():
#     return {
#         "launch_details": {
#             "module": 3,
#             "week": 17,
#             "day": 5,
#             "hour": 19,
#             "min": "00",
#         }
#     }
